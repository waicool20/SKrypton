/*
 * The MIT License (MIT)
 *
 * Copyright (c) SKrypton by waicool20
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    ext.kotlin_version = '1.1.51'
    ext.dokka_version = '0.9.15'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id "com.jfrog.artifactory" version "4.5.4"
    id "com.jfrog.bintray" version "1.7.3"
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'com.jfrog.bintray'

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file('build/classes/main')
            testOutputDir = file('build/classes/test')
        }
    }
}

apply from: "common.gradle"
apply plugin: 'java'

group 'com.waicool20.skrypton'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    /* sikulix */
    compile(group: "com.sikulix", name: "sikulixapi", version: "1.1.2-SNAPSHOT") {
        exclude group: "com.sikulix"
        exclude group: 'com.github.vidstige'
    }
    if (isLinux) compile(group: "com.sikulix", name: "sikulixlibslux", version: "1.1.2-SNAPSHOT")
    if (isMacOsX) compile(group: "com.sikulix", name: "sikulixlibsmac", version: "1.1.2-SNAPSHOT")
    if (isWindows) compile(group: "com.sikulix", name: "sikulixlibswin", version: "1.1.2-SNAPSHOT")

    /* Test */
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

apply plugin: 'org.jetbrains.dokka'

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    includes = ['docs/packages.md']
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/waicool20/SKrypton/tree/master/src/main/kotlin"
        suffix = "#L"
    }
    externalDocumentationLink { url = new URL("https://docs.oracle.com/javase/8/docs/api/") }
    externalDocumentationLink { url = new URL("https://docs.oracle.com/javase/8/javafx/api/") }
    externalDocumentationLink { url = new URL("https://raiman.github.io/SikuliX-2014/javadocs/") }
    externalDocumentationLink { url = new URL("https://www.slf4j.org/api/") }
}

build.finalizedBy shadowJar, ':skrypton-native:nativeJarRelease'

task buildAll {
    group 'build'
    dependsOn 'build', 'testJar', ':skrypton-native:nativeJarDebug'
}

//<editor-fold desc="Artifacts">

shadowJar {
    classifier ""
    archiveName "${rootProject.name}.jar"
    dependencies {
        include(dependency("com.sikulix:sikulixlibs.*"))
    }
}

task docJar(type: ShadowJar) {
    classifier "javadoc"
    archiveName "${rootProject.name}-javadoc.jar"
    from dokka.outputDirectory
}

task srcJar(type: ShadowJar) {
    classifier "sources"
    archiveName "${rootProject.name}-sources.jar"
    from sourceSets.main.allSource
}

task testJar(type: ShadowJar) {
    from sourceSets.main.output
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
    archiveName 'skrypton-test.jar'
    manifest {
        attributes 'Main-Class': 'com.waicool20.skrypton.MainKt'
    }
}

jar.enabled = false
//</editor-fold>

//<editor-fold desc="Publishing">

publishing {
    publications {
        SKryptonAPI(MavenPublication) {
            artifact shadowJar
            artifact srcJar
            artifact docJar
            pom.withXml {
                asNode().appendNode('name', rootProject.name)
                asNode().children().last() + commonPom
                def deps = asNode().appendNode('dependencies')
                configurations.compile.dependencies.each {
                    if((it.group != null) && (it.name != null) && (it.version != null)) {
                        def dep = deps.appendNode('dependency')
                        dep.appendNode('groupId', it.group)
                        dep.appendNode('artifactId', it.name)
                        dep.appendNode('version', it.version)
                        if (it.name == "sikulixapi") {
                            def exclusions = dep.appendNode('exclusions')
                            def sikuliExc = exclusions.appendNode('exclusion')
                            sikuliExc.appendNode('groupId', 'com.sikulix')
                            sikuliExc.appendNode('artifactId', '${sikulix.libs}')
                            def jadbExc = exclusions.appendNode('exclusion')
                            jadbExc.appendNode('groupId', 'com.github.vidstige')
                            jadbExc.appendNode('artifactId', 'jadb')
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory/'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = "waicool20"
            password = publishApiKey
            maven = true
        }
        defaults {
            publications('SKryptonAPI')
            properties = ['qa.level': 'basic', 'dev.team': 'core']
        }
    }
    clientConfig.info.setBuildName('SKrypton-API')
}

artifactoryPublish.dependsOn 'shadowJar', 'srcJar', 'docJar'

bintray {
    user = 'waicool20'
    key = bintrayKey
    publications = ['SKryptonAPI']
    pkg {
        repo = 'SKrypton'
        name = 'skrypton-api'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/waicool20/SKrypton.git'
        version {
            name = rootProject.version
        }
    }
}

if (version.toString().endsWith("SNAPSHOT")) {
    if (publishApiKey == null || publishApiKey.isEmpty()) {
        tasks.findAll { it.group == 'publishing' }.each {
            it.enabled = false
        }
    }
    publish.dependsOn 'artifactoryPublish'
} else {
    if (bintrayKey == null || bintrayKey.isEmpty()) {
        tasks.findAll { it.group == 'publishing' }.each {
            it.enabled = false
        }
    }
    publish.dependsOn 'bintrayUpload'
}

//</editor-fold>
