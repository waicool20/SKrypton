/*
 * The MIT License (MIT)
 *
 * Copyright (c) SKrypton by waicool20
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories.jcenter()
    dependencies.classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
}

apply plugin: 'com.github.johnrengelman.shadow'

String cmakeBuildDebugDir = 'cmake-build-debug'
String cmakeBuildReleaseDir = 'cmake-build-release'
String mainClass = 'com.waicool20.skrypton.setup.SKryptonSetupKt'
int threads = Runtime.runtime.availableProcessors()

//<editor-fold desc="Debug Tasks">

task buildDebug {
    group 'builddebug'
    dependsOn 'refreshCMakeRelease', 'makeNativeLibrariesDebug', 'copyQtDependenciesDebug'
}

task refreshCMakeDebug(type: Exec) {
    group 'builddebug'
    def file = Paths.get("$projectDir").resolve(cmakeBuildDebugDir)
    if (Files.notExists(file)) Files.createDirectory(file)
    workingDir cmakeBuildDebugDir
    commandLine 'cmake'
    args += ['-DCMAKE_BUILD_TYPE=Debug', '-G', "CodeBlocks - Unix Makefiles", '../']
}

task makeNativeLibrariesDebug(type: Exec) {
    group 'builddebug'
    dependsOn refreshCMakeDebug
    shouldRunAfter processDebugResources
    workingDir cmakeBuildDebugDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'SKryptonNative', '--', "-j$threads"]
}

task copyQtDependenciesDebug(type: Exec) {
    group 'builddebug'
    dependsOn refreshCMakeDebug
    shouldRunAfter makeNativeLibrariesDebug
    workingDir cmakeBuildDebugDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'CopyQtDependencies']
}

task nativeJarDebug(type: ShadowJar) {
    group 'builddebug'
    classifier 'debug'
    from sourceSets.main.output
    from sourceSets.debug.output
    configurations = [project.configurations.compile]
    dependsOn 'makeNativeLibrariesDebug', 'copyQtDependenciesDebug'
    archiveName "SKryptonNative_${osName}64_Debug.jar"
    classifier = null
    version = null
    manifest {
        attributes 'Main-Class': mainClass
    }
}
//</editor-fold>

//<editor-fold desc="Release Tasks">

task buildRelease {
    group 'buildrelease'
    dependsOn 'refreshCMakeRelease', 'makeNativeLibrariesRelease', 'copyQtDependenciesRelease'
}

task refreshCMakeRelease(type: Exec) {
    group 'buildrelease'
    def file = Paths.get("$projectDir").resolve(cmakeBuildReleaseDir)
    if (Files.notExists(file)) Files.createDirectory(file)
    workingDir cmakeBuildReleaseDir
    commandLine 'cmake'
    args += ['-DCMAKE_BUILD_TYPE=Release', '-G', "CodeBlocks - Unix Makefiles", '../']
}

task makeNativeLibrariesRelease(type: Exec) {
    group 'buildrelease'
    dependsOn refreshCMakeRelease
    shouldRunAfter processReleaseResources
    workingDir cmakeBuildReleaseDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'SKryptonNative', '--', "-j$threads"]
}

task copyQtDependenciesRelease(type: Exec) {
    group 'buildrelease'
    dependsOn refreshCMakeRelease
    shouldRunAfter makeNativeLibrariesRelease
    workingDir cmakeBuildReleaseDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'CopyQtDependencies']
}

task nativeJarRelease(type: ShadowJar) {
    group 'buildrelease'
    classifier 'release'
    from sourceSets.main.output
    from sourceSets.release.output
    configurations = [project.configurations.compile]
    dependsOn 'makeNativeLibrariesRelease', 'copyQtDependenciesRelease'
    archiveName "SKryptonNative_${osName}64_Release.jar"
    classifier = null
    version = null
    manifest {
        attributes 'Main-Class': mainClass
    }
}

//</editor-fold>
