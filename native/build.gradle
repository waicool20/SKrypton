import java.nio.file.Files
import java.nio.file.Paths

String cmakeBuildDir = 'cmake-build-debug'

apply from: '../common.gradle'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

sourceSets.main.resources {
    srcDirs 'build/resources/main', 'src/main/resources'
}

task refreshCMake(type: Exec) {
    def file = Paths.get("$projectDir").resolve(cmakeBuildDir)
    if (Files.notExists(file)) Files.createDirectory(file)
    workingDir cmakeBuildDir
    commandLine 'cmake'
    String generator
    if (isWindows) {
        generator = "Visual Studio 15 2017"
        if (is64Bit) generator += " Win64"
    } else {
        generator = "Unix Makefiles"
    }
    args += ['-G', generator, '../']
}

task makeNativeLibraries(type: Exec) {
    dependsOn refreshCMake
    workingDir cmakeBuildDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'SKryptonNative']
    if (isUnix) {
        int threads = Runtime.runtime.availableProcessors()
        args += ['--', "-j$threads"]
    }
}

task copyQtDependencies(type: Exec) {
    dependsOn refreshCMake
    workingDir cmakeBuildDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'CopyQtDependencies']
    if (isUnix) {
        int threads = Runtime.runtime.availableProcessors()
        args += ['--', "-j$threads"]
    }
}

task copyKotlinStdLib(type: Copy) {
    into "build/kstdlib"
    include("kotlin/jvm/functions/**/*")
    include("kotlin/Function.class")
    configurations.runtime.files.each {
        if (it.name.contains("kotlin")) {
            from zipTree(it)
        }
    }
}

shadowJar {
    dependsOn 'makeNativeLibraries', 'copyQtDependencies'
    String bitness
    String os
    if (is64Bit) {
        bitness = "64"
    } else {
        bitness = "32"
    }
    if (isLinux) {
        os = "Linux"
    } else if(isWindows) {
        os = "Windows"
    } else if(isMacOsX) {
        os = "MacOsX"
    } else {
        os = "Unknown"
    }
    archiveName "SKryptonNative_${os}${bitness}.jar"
    classifier = null
    version = null
    manifest {
        attributes 'Main-Class': 'com.waicool20.skrypton.SKryptonSetupKt'
    }
}

build.finalizedBy shadowJar
jar.enabled = false
