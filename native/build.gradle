import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * The MIT License (MIT)
 *
 * Copyright (c) SKrypton by waicool20
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

apply from: '../common.gradle'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

group 'com.waicool20.skrypton'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8

String artifactName = "${name}-${osName.toLowerCase()}64"

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

String mainClass = 'com.waicool20.skrypton.setup.SKryptonSetupKt'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'no.tornado:tornadofx:1.7.11'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    /* sikulix */
    compile(group: "com.sikulix", name: "sikulixapi", version: "1.1.2-SNAPSHOT") {
        exclude group: "com.sikulix"
        exclude module: 'jadb'
    }
    if (isLinux) compile(group: "com.sikulix", name: "sikulixlibslux", version: "1.1.2-SNAPSHOT")
    if (isMacOsX) compile(group: "com.sikulix", name: "sikulixlibsmac", version: "1.1.2-SNAPSHOT")
    if (isWindows) compile(group: "com.sikulix", name: "sikulixlibswin", version: "1.1.2-SNAPSHOT")
}

sourceSets {
    release {
        resources.srcDir 'build/resources/release'
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    debug {
        resources.srcDir 'build/resources/debug'
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task copyKotlinStdLib(type: Copy) {
    into "build/kstdlib"
    include("kotlin/jvm/functions/**/*")
    include("kotlin/Function.class")
    configurations.runtime.files.each {
        if (it.name.contains("kotlin")) {
            from zipTree(it)
        }
    }
}

if (isLinux) {
    apply from: 'linux-build.gradle'
} else if (isWindows) {
    apply from: 'windows-build.gradle'
} else if (isMacOsX) {
    // Can't test this yet
} else {
    throw new Exception("Unsupported system")
}

//<editor-fold desc="Debug builds">

task buildDebug {
    group 'builddebug'
    dependsOn 'refreshCMakeRelease', 'makeNativeLibrariesDebug', 'copyQtDependenciesDebug'
}

task nativeJarDebug(type: ShadowJar) {
    group 'builddebug'
    classifier ""
    from sourceSets.main.output
    from sourceSets.debug.output
    configurations = [project.configurations.compile]
    dependsOn 'makeNativeLibrariesDebug', 'copyQtDependenciesDebug'
    archiveName "${artifactName}-debug.jar"
    manifest {
        attributes 'Main-Class': mainClass
    }
}

task copyQtDependenciesDebug(type: Exec) {
    group 'builddebug'
    dependsOn refreshCMakeDebug
    shouldRunAfter makeNativeLibrariesDebug
    workingDir cmakeBuildDebugDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'CopyQtDependencies']
}

//</editor-fold>

//<editor-fold desc="Release builds">

task buildRelease {
    group 'buildrelease'
    dependsOn 'refreshCMakeRelease', 'makeNativeLibrariesRelease', 'copyQtDependenciesRelease'
}

task nativeJarRelease(type: ShadowJar) {
    group 'buildrelease'
    classifier ""
    from sourceSets.main.output
    from sourceSets.release.output
    configurations = [project.configurations.compile]
    dependsOn 'makeNativeLibrariesRelease', 'copyQtDependenciesRelease'
    archiveName "${artifactName}.jar"
    manifest {
        attributes 'Main-Class': mainClass
    }
}

task copyQtDependenciesRelease(type: Exec) {
    group 'buildrelease'
    dependsOn refreshCMakeRelease
    shouldRunAfter makeNativeLibrariesRelease
    workingDir cmakeBuildReleaseDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'CopyQtDependencies']
}

//</editor-fold>

refreshCMakeDebug.dependsOn copyKotlinStdLib
refreshCMakeRelease.dependsOn copyKotlinStdLib
build.finalizedBy nativeJarRelease
jar.enabled = false

//<editor-fold  desc="Publishing">

// Skip publish task if api key is not provided
if (publishApiKey == null || publishApiKey.isEmpty()) {
    tasks.findAll { it.group == 'publishing' }.each {
        it.enabled = false
    }
}

publishing {
    publications {
        nativeReleaseJar(MavenPublication) {
            artifactId artifactName
            artifact nativeJarRelease
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name artifactName
                    description "A browser automation library that uses SikuliX and doesn't grab grab your mouse"
                    url "https://github.com/waicool20/SKrypton"
                    packaging "jar"
                    licenses {
                        license {
                            name "The MIT License (MIT)"
                            url "http://opensource.org/licenses/MIT"
                        }
                    }
                    developers {
                        developer {
                            name "waicool20"
                            email "waicool20@gmail.com"
                            organization "waicool20"
                            organizationUrl "https://www.waicool20.com"
                        }
                    }
                    scm {
                        url "https://github.com/waicool20/SKrypton"
                        connection "scm:git:git://github.com/waicool20/SKrypton.git"
                        developerConnection "scm:git:ssh://github.com/waicool20/SKrypton.git"
                    }
                }
                def deps = asNode().appendNode('dependencies')
                configurations.compile.dependencies.each {
                    if((it.group != null) && (it.name != null) && (it.version != null)) {
                        def dep = deps.appendNode('dependency')
                        dep.appendNode('groupId', it.group)
                        dep.appendNode('artifactId', it.name)
                        dep.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory/'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = "waicool20"
            password = publishApiKey
            maven = true
        }
        defaults {
            publications('nativeReleaseJar')
            publishArtifacts = true
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
}

publish.dependsOn 'artifactoryPublish'

//</editor-fold>
