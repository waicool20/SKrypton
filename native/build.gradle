import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths

String cmakeBuildDir = 'cmake-build-debug'

apply plugin: 'kotlin'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

task refreshCMake(type: Exec) {
    def file = Paths.get("$projectDir").resolve(cmakeBuildDir)
    if (Files.notExists(file)) Files.createDirectory(file)
    workingDir cmakeBuildDir
    commandLine 'cmake'
    String generator
    if (OperatingSystem.current().isWindows()) {
        generator = "Visual Studio 15 2017"
        if (is64Bit()) generator += " Win64"
    } else {
        generator = "Unix Makefiles"
    }
    args += ['-G', generator, '../']
}

task makeNativeLibraries(type: Exec) {
    dependsOn refreshCMake
    workingDir cmakeBuildDir
    commandLine 'cmake'
    args += ['--build', './', '--target', 'install']
    if (OperatingSystem.current().isUnix()) {
        int threads = Runtime.runtime.availableProcessors() * 2
        args += ['--', "-j$threads"]
    }
}

task copyKotlinStdLib(type: Copy) {
    into "build/kstdlib"
    include("kotlin/jvm/functions/**/*")
    include("kotlin/Function.class")
    configurations.runtime.files.each {
        if (it.name.contains("kotlin")) {
            from zipTree(it)
        }
    }
}

Boolean is32Bit() {
    return !is64Bit()
}

Boolean is64Bit() {
    return System.getProperty("os.arch").contains("64")
}

Boolean commandExists(String command) {
    try {
        Runtime.runtime.exec(command)
        return true
    } catch(Exception ignored) {
        return false
    }
}
